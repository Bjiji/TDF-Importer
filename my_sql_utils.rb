require 'mysql2'
require 'chronic_duration'
require_relative 'nationality_utils'
require_relative 'utils'
require_relative 'cyclist_alias_name'

class MySQLUtils

  @@client = Mysql2::Client.new(:host => "localhost", :username => "tdf", :password => "tdf", :database => "tdf")

  def self.mescape(str)
    if (str != nil) then
      @@client.escape(str.strip)
    else
      str
    end
  end

  def self.getRaceTeamByCode(team_code, year)
    team = @@client.query("SELECT rt.* FROM race_teams rt join teams t on t.id = rt.team_id WHERE trim(lower(t.uci)) like trim(lower(\"#{mescape(Utils.stripNonAlphaNum(team_code))}\")) and rt.year = #{year}")
    if (team != nil && team.size > 0) then
      team.first
    else
      nil
    end
  end

  def self.getRaceTeam(team_name, year)
    team = @@client.query("SELECT rt.* FROM race_teams rt WHERE trim(lower(rt.label)) like trim(lower(\"#{mescape(Utils.stripNonAlphaNum(team_name))}\")) and rt.year = #{year}")
    if (team != nil && team.size > 0) then
      team.first
    else
      team = @@client.query("SELECT rt.* FROM race_teams rt join teams t on t.id = rt.team_id WHERE trim(lower(t.name)) like trim(lower(\"#{mescape(Utils.stripNonAlphaNum(team_name))}\")) and rt.year = #{year}")
      if (team != nil && team.size > 0) then
        team.first
      else
        nil
      end
    end
  end

  def self.getTeam(team)
    team = @@client.query("SELECT t.* FROM teams t WHERE trim(lower(t.name)) like trim(lower(\"#{mescape(Utils.stripNonAlphaNum(team))}\"))")
    if (team != nil && team.size > 0) then
      team.first
    else
      nil
    end
  end

  def self.createRaceTeam(name, year)
    race_id = getOrCreateRace(year, nil)['id']
    team = getTeam(name);
    if (team == nil) then
      team_id = createTeam(name);
    else
      team_id = team['id'];
    end
    @@client.query("insert into race_teams(label, year, race_id, team_id) VALUES('#{name}', #{year}, #{race_id}, #{team_id});")
    @@client.last_id
  end

  def self.createTeam(name)
    @@client.query("insert into teams(name, created_at, updated_at) VALUES('#{name}', now(), now());")
    @@client.last_id
  end

  def self.createCyclist(lastname, firstname, nationality, year, dob)
    @@client.query("insert into cyclists(firstname, lastname, nationality, dob, created_at, updated_at, description) VALUES('#{firstname}', '#{lastname}', '#{nationality}', '#{dob}', now(), now(), 'auto-generated by importer because no matching cyclists found around year #{year}');")
    @@client.last_id
  end

  def self.getExactMatchCyclist(lastname, firstname, year)
    query = "SELECT c.* FROM cyclists c  WHERE c.lastname LIKE '#{mescape(lastname)}' AND c.firstname LIKE '#{mescape(firstname)}%' AND exists (select 1 from race_runners rr where rr.cyclist_id = c.id and #{year} < rr.year + 8 AND #{year} > rr.year - 8)"
    cyclist = @@client.query(query)
    if (cyclist.size > 1) then

      cyclist.each do |cyclist|
        puts cyclist
      end
      raise "'#{lastname}' - '#{firstname}' is ambiguous for year '#{year}':"
#   elsif (cyclist_id.size == 0) then
#     cyclist_id = @@client.query("SELECT distinct c.*, min(rr.year) 'min_year', max(rr.year) as 'max_year' FROM cyclists c join race_runners rr on rr.cyclist_id = c.id WHERE c.lastname LIKE '#{mescape(lastname)}' AND c.firstname LIKE '#{firstname.chars.first}%' group by c.id HAVING (#{year} < max_year + 5 AND #{year} > min_year - 5)")
    end
    if (cyclist != nil) then
      cyclist.first
    else
      nil
    end
  end

  def self.getOrCreateRace(year, race_description)
    result = @@client.query("SELECT r.* FROM races as r WHERE r.year = '#{year}'")
    if (result == nil || result.count == 0) then
      @@client.query("insert into races(year, name, created_at, updated_at, description) VALUES('#{year}', 'Année #{year}', now(), now(), \"#{mescape(race_description)}\");")
    else
      @@client.query("update races set description = \"#{mescape(race_description)}\";")
    end
    result = @@client.query("SELECT r.* FROM races as r WHERE r.year = '#{year}'")
    result.first
  end

  def self.getMatchingRaceRunner(year, cyclist_name)

    cyclist_name = CyclistAliasName.getCanonicalName(cyclist_name)
    runner = @@client.query("SELECT distinct rr.* FROM race_runners rr WHERE REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(concat(lower(rr.firstname), lower(rr.lastname)), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') like   REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') collate utf8_general_ci and rr.year = '#{year}'")
    if (runner == nil || runner.size == 0) then
      runner = @@client.query("SELECT distinct rr.* FROM race_runners rr WHERE REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(concat(lower(rr.lastname), lower(rr.firstname)), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') like   REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') collate utf8_general_ci and rr.year = '#{year}'")
    end
    if (runner == nil || runner.size == 0) then
      runner = @@client.query("SELECT distinct rr.* FROM race_runners rr WHERE  REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(concat(lower(rr.lastname)), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') like   REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') collate utf8_general_ci and rr.year = '#{year}'")
    end
    if (runner == nil || runner.size == 0) then
      runner = @@client.query("SELECT distinct rr.* FROM race_runners rr join cyclists c on c.id = rr.cyclist_id WHERE   REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(concat(lower(c.firstname), lower(c.lastname)), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') like   REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') collate utf8_general_ci and rr.year = '#{year}'")
    end
    if (runner == nil || runner.size == 0) then
      runner = @@client.query("SELECT distinct rr.* FROM race_runners rr join cyclists c on c.id = rr.cyclist_id WHERE  REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(concat(lower(c.lastname), lower(c.firstname)), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') like   REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') collate utf8_general_ci and rr.year = '#{year}'")
    end
    if (runner == nil || runner.size == 0) then
      runner = @@client.query("SELECT distinct rr.* FROM race_runners rr join cyclists c on c.id = rr.cyclist_id WHERE  REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(concat(lower(c.lastname)), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') like   REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') collate utf8_general_ci and rr.year = '#{year}'")
    end
    if (runner == nil || runner.size == 0) then
      query = "SELECT distinct rr.* FROM race_runners rr join cyclists c on c.id = rr.cyclist_id WHERE  REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(concat(lower(c.alternate_name)), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') like   REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^[:alpha:]]',''), '[Øø]', 'o'), '[ñÑ]', 'n') collate utf8_general_ci and rr.year = '#{year}'"
      runner = @@client.query(query)
    end

    if (runner != nil && runner.size > 0) then
      if (runner.size == 1) then
        runner.first
      else
        #   raise "duplicate cyclist '#{cyclist_name}' found for year #{year}"
      end
    else
      # raise "no cyclist '#{cyclist_name}' found for year #{year}"
    end
  end

  def self.getRaceRunner(year, cyclist_id, race_team_id)
    runner = @@client.query("SELECT distinct rr.* FROM race_runners rr WHERE rr.cyclist_id = '#{cyclist_id}' AND rr.race_team_id = '#{race_team_id}' and rr.year = '#{year}'")
    if (runner != nil && runner.size > 0) then
      runner.first
    else
      nil
    end
  end

  def self.createRaceRunner(dossard, lastname, firstname, year, cyclist_id, race_team_id, race_id, nationality)
    @@client.query("insert into race_runners(number, year, firstname, lastname, nationality, cyclist_id, race_team_id, race_id, description) VALUES('#{dossard}', '#{year}', \"#{firstname}\", \"#{lastname}\", '#{nationality}', '#{cyclist_id}', '#{race_team_id}', '#{race_id}', \"auto-generated by importer because no matching racerunners #{lastname} #{firstname} (cyclist_id: #{cyclist_id}) found for year #{year}\");")
    @@client.last_id
  end

  def self.getOrCreateRaceRunner(year, dossard, lastname, firstname, nationality, team_name)
    rr = getMatchingRaceRunner(year, firstname + ' ' + lastname)
    if (rr != nil) then
      return rr
    else
      rr = getDossard(year, dossard)
      if (rr != nil) then
        puts "> match between '#{firstname} #{lastname}' and '#{rr['firstname']} #{rr['lastname']}' for year #{year} and dossard #{dossard} ?"
        setCyclistAlternateName(rr['cyclist_id'], "#{firstname} #{lastname}")
        return rr
      end
    end
    cyclist_id = nil
    cyclist = getExactMatchCyclist(lastname, firstname, year)
    if (cyclist == nil) then
      cyclist_id = createCyclist(lastname, firstname, nationality, year, nil)
    else
      cyclist_id = cyclist['id']
    end

    race_id = getOrCreateRace(year, nil)['id']

    team = getRaceTeam(team_name, year)
    if (team == nil) then
      race_team_id = createRaceTeam(team_name, year)
    else
      race_team_id = team['id']
    end

    raceRunner = getRaceRunner(year, cyclist_id, race_team_id)
    if (raceRunner == nil) then
      createRaceRunner(dossard, lastname, firstname, year, cyclist_id, race_team_id, race_id, nationality)
    end
    getRaceRunner(year, cyclist_id, race_team_id)
  end

  def self.getDossard(year, dossard)
    result = @@client.query("SELECT rr.* from race_runners rr WHERE rr.year = '#{year}' AND rr.number = #{dossard}")
    if (result != nil && result.size > 0) then
      result.first
    else
      nil
    end
  end

  def self.getStage(race_id, stageNb, subStageNb)
    result = @@client.query("SELECT s.* from stages s WHERE s.race_id = '#{race_id}' AND s.stageNb = '#{stageNb}' and s.subStageNb = '#{subStageNb}'")
    if (result != nil && result.size > 0) then
      result.first
    else
      nil
    end
  end

  def self.setCyclistAlternateName(cyclist_id, alternate_name)
    # @@client.query("UPDATE stages set info = CONCAT(IFNULL(CONCAT(info, '\n'),''), '#{mescape(stage_info)}') WHERE id = '#{stage_id}'")
    @@client.query("UPDATE cyclists set alternate_name = '#{mescape(alternate_name)}' WHERE id = '#{cyclist_id}'")
  end

  def self.addInfosToStage(stage_id, stage_info)
    # @@client.query("UPDATE stages set info = CONCAT(IFNULL(CONCAT(info, '\n'),''), '#{mescape(stage_info)}') WHERE id = '#{stage_id}'")
    @@client.query("UPDATE stages set info = '#{mescape(stage_info)}' WHERE id = '#{stage_id}'")
  end

  def self.updateStageRoute(stage, route)
    @@client.query("UPDATE stages set route = '#{mescape(route)}' WHERE id = '#{stage['id']}'")
  end

  def self.createStage(race_id, year, stageNb, subStageNb, sstart, send, sdist, sdate, stage_type, ordinal, stage_details)
    slocation = findMatchingStageLocation(sstart)
    flocation = findMatchingStageLocation(send)
    query = "insert into stages(date, start, finish, start_location, finish_location, stageNb, subStageNb, race_id, stage_type, year, distance, label, ordinal, route, start_location_proposal, finish_location_proposal) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, (select name from stage_locations where id = '#{slocation}'), (select name from stage_locations where id = '#{flocation}'))"

    begin
      statement = @@client.prepare(query)
      statement.execute(frenchToMySQLDate(sdate), sstart, send, slocation, flocation, stageNb, subStageNb, race_id, stage_type, year, sdist, "#{stageNb}.#{subStageNb}", ordinal, stage_details)
    rescue Exception => e
      puts query
      puts e.message
      puts e.backtrace.inspect
    end
    getStage(race_id, stageNb, subStageNb)
  end

  def self.findMatchingStageLocation(location)
    result = @@client.query("SELECT s.id from stage_locations s WHERE LOWER(name) like LOWER(TRIM('#{mescape(location)}'))")
    # if (result == nil || result.size == 0) then
    #   result = @@client.query("SELECT s.id from stage_locations s WHERE LENGTH(name) = LENGTH(TRIM('#{mescape(location)}')) AND SOUNDEX(name) = SOUNDEX(TRIM('#{mescape(location)}'))")
    # end
    if (result != nil && result.size > 0) then
      result.first['id']
    else
      nil
    end
  end

  def self.frenchToMySQLDate(date)
    if (date == nil)
      nil
    else
      Date.parse(Utils.frenchToEnglishDate(date)).strftime('%Y-%m-%d')
    end
  end

  def self.create_ITE_stage_result(year, stage_id, position, runner_name, nationality, time_sec, diff_time_sec, dns = nil, dnf = nil, dnq = nil)
    rr = getMatchingRaceRunner(year, runner_name)
    if (rr != nil) then
      rr_id = rr['id']
      result = @@client.query("SELECT id from ite_stage_results s WHERE s.stage_id = #{stage_id} and s.race_runner_id = #{rr_id}")
      if (result != nil && result.size > 0) then
        puts "pb (duplicate ite) on year: #{year}, stage_id: #{stage_id}, position: #{position}, name: #{rr['lastname']} #{rr['firstname']}, nationality: #{nationality}, time: #{time_sec ? Time.at(time_sec).utc.strftime("%H:%M:%S") : nil}. discard"
        return
      else
        query = "insert into ite_stage_results(stage_id, race_runner_id, pos, dns, dnf, dnq, year, diff_time_sec, time_sec, _confidence, runner_s) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
        begin
          statement = @@client.prepare(query)
          statement.execute(stage_id, rr_id, position, dns ? 1 : nil, dnf ? 1 : nil, dnq ? 1 : nil, year, diff_time_sec, time_sec, "importer.rb @ #{Time.new}", runner_name)
        rescue Exception => e
          puts query
          puts e.message
          puts e.backtrace.inspect
        end
      end
    else
      puts "pb no runner found on year: #{year}, stage_id: #{stage_id}, position: #{position}, name: #{runner_name}, nationality: #{nationality}, time: #{time_sec ? Time.at(time_sec).utc.strftime("%H:%M:%S") : nil}. nil instead"
    end
  end

  def self.create_ITE_stage_result_TTT(year, stage_id, position, team_name, time_sec, diff_time_sec, dns = nil, dnf = nil, dnq = nil)
    rt_id = nil
    rt = getRaceTeam(team_name, year)
    if (rt != nil) then
      rt_id = rt['id']
      result = @@client.query("SELECT id from ite_stage_results s WHERE s.stage_id = #{stage_id} and s.race_team_id = #{rt_id}")
      if (result != nil && result.size > 0) then
        puts "pb (duplicate ite_TTT) on year: #{year}, stage_id: #{stage_id}, position: #{position}, name: #{team_name}, time: #{time_sec ? Time.at(time_sec).utc.strftime("%H:%M:%S") : nil}. discard"
        return
      end
    else
      raise "team '#{team_name}' not found for year: #{year}, stage_id: #{stage_id}, position: #{position}, time: #{time_sec ? Time.at(time_sec).utc.strftime("%H:%M:%S") : nil}. nil instead"
    end
    query = "insert into ite_stage_results(stage_id, race_team_id, pos, dns, dnf, dnq, year, diff_time_sec, time_sec, _confidence, runner_s) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
    begin
      statement = @@client.prepare(query)
      statement.execute(stage_id, rt_id, position, dns ? 1 : nil, dnf ? 1 : nil, dnq ? 1 : nil, year, diff_time_sec, time_sec, "importer.rb @ #{Time.new}", team_name)
    rescue Exception => e
      puts query
      puts e.message
      puts e.backtrace.inspect
    end
  end

  def self.create_yj_stage_result(year, stage_id, position, runner_name, nationality, time_sec, diff_time_sec)
    rr_id = nil
    rr = getMatchingRaceRunner(year, runner_name)
    if (rr != nil) then
      rr_id = rr['id']
      result = @@client.query("SELECT id from yj_stage_results s WHERE s.stage_id = #{stage_id} and s.race_runner_id = #{rr_id}")
      if (result != nil && result.size > 0) then
        puts "pb (duplicate yj) on year: #{year}, stage_id: #{stage_id}, position: #{position}, name: #{runner_name}, nationality: #{nationality}, time: #{time_sec ? Time.at(time_sec).utc.strftime("%H:%M:%S") : nil}. discard"
        return
      end
    else
      puts "pb no runner found on year: #{year}, stage_id: #{stage_id}, position: #{position}, name: #{runner_name}, nationality: #{nationality}, time: #{time_sec ? Time.at(time_sec).utc.strftime("%H:%M:%S") : nil}. nil instead"
    end
    query = "insert into yj_stage_results(stage_id, race_runner_id, pos, year, diff_time_sec, time_sec, runner_s) VALUES(?, ?, ?, ?, ?,  ?, ?)"
    begin
      statement = @@client.prepare(query)
      statement.execute(stage_id, rr_id, position, year, diff_time_sec, time_sec, runner_name)
    rescue Exception => e
      puts query
      puts e.message
      puts e.backtrace.inspect
    end
  end

  def self.getStageInfos(stage_id)
    res = @@client.query("SELECT isr.stage_winner_id, isr.leader_id, isr.sprinter_id, isr.climber_id, isr.race_team_id, isr.young_id, isr.combine_id, isr.stage_combat_id, isr.overall_combat_id from ig_stage_results isr where isr.stage_id = #{stage_id};")
    if (res != nil && res.size > 0) then
      res.first
    else
      nil
    end
  end

  def self.create_IG_stage_result(year, stage_id, stage_winner_str, jersey_str, sprint_str, mountain_str, young_str, team_str, combat_str)

    if (stage_winner_str != nil) then
      stage_winner = getMatchingRaceRunner(year, stage_winner_str)
      if (stage_winner == nil) then
        puts "pb winner not found on year: #{year}, stage_id: #{stage_winner_str}. nil instead"
        stage_winner_id = nil
      else
        stage_winner_id = stage_winner['id']
      end
    end
    if (jersey_str != nil) then
      jersey_winner = getMatchingRaceRunner(year, jersey_str)
      if (jersey_winner == nil) then
        puts "pb jersey not found on year: #{year}, stage_id: #{jersey_str}. nil instead"
        jersey_winner_id = nil
      else
        jersey_winner_id = jersey_winner['id']
      end
    end
    if (sprint_str != nil) then
      sprint_winner = getMatchingRaceRunner(year, sprint_str)
      if (sprint_winner == nil) then
        puts "pb sprint not found on year: #{year}, stage_id: #{sprint_str}. nil instead"
        sprint_winner_id = nil
      else
        sprint_winner_id = sprint_winner['id']
      end
    end
    if (mountain_str != nil) then
      mountain_winner = getMatchingRaceRunner(year, mountain_str)
      if (mountain_winner == nil) then
        puts "pb mountain not found on year: #{year}, stage_id: #{mountain_str}. nil instead"
        mountain_winner_id = nil
      else
        mountain_winner_id = mountain_winner['id']
      end
    end
    if (young_str != nil) then
      young_winner = getMatchingRaceRunner(year, young_str)
      if (young_winner == nil) then
        puts "pb young not found on year: #{year}, stage_id: #{young_str}. nil instead"
        young_winner_id = nil
      else
        young_winner_id = young_winner['id']
      end
    end
    if (team_str != nil) then
      team_winner = getRaceTeam(team_str, year)
      if (team_winner == nil) then
        puts "pb team not found on year: #{year}, stage_id: #{team_str}. nil instead"
        team_winner_id = nil
      else
        team_winner_id = team_winner['id']
      end
    end
    if (combat_str != nil) then
      combat_winner = getMatchingRaceRunner(year, combat_str)
      if (combat_winner == nil) then
        puts "pb combat not found on year: #{year}, stage_id: #{combat_str}. nil instead"
        combat_winner_id = nil
      else
        combat_winner_id = combat_winner['id']
      end
    end

    doInsert = true
    result = @@client.query("SELECT id from ig_stage_results s WHERE s.stage_id = #{stage_id} and s.year = #{year}")
    if (result != nil && result.size > 0) then
      if (stage_winner_str != nil && jersey_str != nil) then
        puts "pb (duplicate ig) on year: #{year}, stage_id: #{stage_id}. overwrite:"
        @@client.query("DELETE from ig_stage_results WHERE stage_id = #{stage_id} and year = #{year}")
      else
        doInsert = false
      end
    end
    if (doInsert) then
      insert_IG_stage_result(stage_id, stage_winner_id, jersey_winner_id, sprint_winner_id, mountain_winner_id, team_winner_id, young_winner_id, combat_winner_id, stage_winner_str, jersey_str, sprint_str, mountain_str, team_str, young_str, combat_str, year)
    end

  end

  def self.insert_IG_stage_result(stage_id, stage_winner_id, jersey_winner_id, sprint_winner_id, mountain_winner_id, team_winner_id, young_winner_id, combat_winner_id, stage_winner_str, jersey_str, sprint_str, mountain_str, team_str, young_str, combat_str, year)
    result = @@client.query("SELECT id from ig_stage_results s WHERE s.stage_id ")
    if (result != nil && result.size > 0) then
      puts "pb (duplicate ig_stage_result) on stage_id: #{stage_id}. discard"
      return
    end
    query = "insert into ig_stage_results(stage_id, stage_winner_id, leader_id, sprinter_id, climber_id, race_team_id, young_id, stage_combat_id, stage_winner_s, leader_s, sprinter_s, climber_s, team_s, young_s, stage_combat_s, year) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
    begin
      statement = @@client.prepare(query)
      statement.execute(stage_id, stage_winner_id, jersey_winner_id, sprint_winner_id, mountain_winner_id, team_winner_id, young_winner_id, combat_winner_id, stage_winner_str, jersey_str, sprint_str, mountain_str, team_str, young_str, combat_str, year)
    rescue Exception => e
      puts e.message
      puts e.backtrace.inspect
      raise query
    end
  end

  def self.create_IG_race_result(year, race_id, jersey_str, sprint_str, mountain_str, young_str, team_str, combat_str)
    result = @@client.query("SELECT id from ig_race_results s WHERE s.race_id = #{race_id} and s.year = #{year}")
    if (result != nil && result.size > 0) then
      puts "pb (duplicate ig) on year: #{year}, race_id: #{race_id}. discard"
      return
    end
    if (jersey_str != nil) then
      jersey_winner = getMatchingRaceRunner(year, jersey_str)
      if (jersey_winner == nil) then
        puts "pb jersey not found on year: #{year}, stage_id: #{jersey_str}. nil instead"
        leader_id = nil
      else
        leader_id = jersey_winner['id']
      end
    end
    if (sprint_str != nil) then
      sprint_winner = getMatchingRaceRunner(year, sprint_str)
      if (sprint_winner == nil) then
        puts "pb sprint not found on year: #{year}, stage_id: #{sprint_str}. nil instead"
        sprinter_id = nil
      else
        sprinter_id = sprint_winner['id']
      end
    end
    if (mountain_str != nil) then
      mountain_winner = getMatchingRaceRunner(year, mountain_str)
      if (mountain_winner == nil) then
        puts "pb mountain not found on year: #{year}, stage_id: #{mountain_str}. nil instead"
        climber_id = nil
      else
        climber_id = mountain_winner['id']
      end
    end
    if (young_str != nil) then
      young_winner = getMatchingRaceRunner(year, young_str)
      if (young_winner == nil) then
        puts "pb young not found on year: #{year}, stage_id: #{young_str}. nil instead"
        young_id = nil
      else
        young_id = young_winner['id']
      end
    end
    if (team_str != nil) then
      team_winner = getRaceTeam(team_str, year)
      if (team_winner == nil) then
        puts "pb team not found on year: #{year}, stage_id: #{team_str}. nil instead"
        race_team_id = nil
      else
        race_team_id = team_winner['id']
      end
    end
    if (combat_str != nil) then
      combat_winner = getMatchingRaceRunner(year, combat_str)
      if (combat_winner == nil) then
        puts "pb combat not found on year: #{year}, stage_id: #{combat_str}. nil instead"
        overall_id = nil
      else
        overall_id = combat_winner['id']
      end
    end
    create_IG_race_result_ids(year, race_id, leader_id, sprinter_id, climber_id, race_team_id, young_id, nil, overall_id)
  end

  def self.create_IG_race_result_ids(year, race_id, leader_id, sprinter_id, climber_id, race_team_id, young_id, combine_id, overall_id)
    result = @@client.query("SELECT id from ig_race_results r WHERE r.race_id = #{race_id} and r.year = #{year}")
    if (result != nil && result.size > 0) then
      puts "pb (duplicate ig) on year: #{year}, race_id: #{race_id}. discard"
      return
    end

    query = "insert into ig_race_results(race_id, leader_id, sprinter_id, climber_id, race_team_id, young_id, combine_id, overall_combat_id, year) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)"
    begin
      statement = @@client.prepare(query)
      statement.execute(race_id, leader_id, sprinter_id, climber_id, race_team_id, young_id, combine_id, overall_id, year)
    rescue Exception => e
      puts query
      puts e.message
      puts e.backtrace.inspect
    end
  end

  def self.getOrCreateMountain(year, stage_id, winner_str, col_str, col_cat, col_pos, km, altitude)
    if (altitude == nil)
      altitude = getLastMatchingAltitudeMountain(col_str)
    end
    finish = isFinish(stage_id, km)
    existing = @@client.query("select id from mountain_stage_results where stage_id = #{stage_id} and `order` = #{col_pos}")
    if (existing != nil && existing.size > 0) then
      mountain_record = existing.first
      statement = @@client.prepare("update mountain_stage_results set altitude = ?, finish = ?, category_s = ?, km = ? where id = '#{mountain_record['id']}'")
      statement.execute(altitude, finish, col_cat, km)
    else
      winner = getMatchingRaceRunner(year, winner_str)
      if (winner != nil) then
        winner_id = winner['id']
      end
      query = "insert into mountain_stage_results(stage_id, `order`, name, leader_id, finish, category_s, leader_s, altitude, km, year) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
      begin
        statement = @@client.prepare(query)
        statement.execute(stage_id, col_pos, col_str, winner_id, finish, col_cat, winner_str, altitude, km, year)
      rescue Exception => e
        puts query
        puts e.message
        puts e.backtrace.inspect
      end
    end
  end

  def self.isFinish(stage_id, km)
    tmp = @@client.query("select (ABS(distance - #{km}) < 1) as finish from stages where id = #{stage_id}").first
    if (tmp == nil) then
      0
    else
      tmp['finish']
    end
  end

  def self.getLastMatchingAltitudeMountain(col_str)
    tmp = @@client.query("SELECT altitude FROM mountain_stage_results m WHERE REGEXP_REPLACE(lower(m.name), '[^[:alpha:]]','') like  REGEXP_REPLACE(lower(trim('#{mescape(col_str)}')), '[^[:alpha:]]','') collate utf8_general_ci and not(altitude is null) order by m.year limit 1").first
    if (tmp == nil) then
      nil
    elsif tmp['altitude']
    end
  end

  def self.getLastStage(year)
    @@client.query("select s.* from stages s left join stages o on o.race_id = s.race_id and o.ordinal = s.ordinal + 1 where s.year = #{year} and o.ordinal is null order by s.ordinal desc").first()
  end

  def self.getRaceRunnerName(rr_id)
    runner = @@client.query("SELECT concat(c.firstname, ' ', c.lastname) as name FROM race_runners rr join cyclists c on c.id = rr.cyclist_id WHERE rr.id = '#{rr_id}'")
    if (runner != nil && runner.size > 0) then
      runner.first['name']
    else
      nil
    end
  end

  def self.getOrCreateRaceRunnerASO(year, dossard, lastname, firstname, nationality, team_code, dob)
    rr = getMatchingRaceRunner(year, firstname + ' ' + lastname)
    if (rr != nil) then
      return rr
    else
      rr = getDossard(year, dossard)
      if (rr != nil)
        puts "> match between '#{firstname} #{lastname}' and '#{rr['firstname']} #{rr['lastname']}' for year #{year} and dossard #{dossard} ?"
        return rr
      end
    end
    cyclist_id = nil
    cyclist = getExactMatchCyclist(lastname, firstname, year)
    if (cyclist == nil) then
      # cyclist_id = createCyclist(lastname, firstname, nationality, year, dob)
      puts ">> Unable to find cyclist '#{firstname} #{lastname.upcase}' for year #{year}. Create it ?"
      return nil
    else
      cyclist_id = cyclist['id']
    end

    race_id = getOrCreateRace(year, nil)['id']

    team = getRaceTeamByCode(team_code, year)
    if (team == nil) then
      raise "Unable to find team with code '#{team_code}' for year #{year}. Please create it first"
    else
      race_team_id = team['id']
    end

    raceRunner = getRaceRunner(year, cyclist_id, race_team_id)
    if (raceRunner == nil) then
      createRaceRunner(dossard, lastname, firstname, year, cyclist_id, race_team_id, race_id, nationality)
    end
    getRaceRunner(year, cyclist_id, race_team_id)
  end

end