require 'mysql2'
require 'chronic_duration'
require_relative 'nationality_utils'

class MySQLUtils

  @@client = Mysql2::Client.new(:host => "localhost", :username => "root", :password => "root", :database => "tdf")

  def mescape(str)
    if (str != nil) then
      @@client.escape(str.strip)
    else
      str
    end
  end

  def getTeam(team, year)
    team = @@client.query("SELECT t.* FROM teams t WHERE trim(lower(t.name)) like trim(lower(\"#{mescape(team)}\"))")
    if (team != nil && team.size > 0) then
      team.first
    else
      nil
    end
  end

  def createTeam(name, year)
    @@client.query("insert into teams(name, dof, created_at, updated_at, description) VALUES('#{name}', date('#{year}-01-01'), now(), now(), 'auto-generated by importer because no matching teams found around year #{year}');")
    @@client.last_id
  end

  def createCyclist(lastname, firstname, nationality, year)
    @@client.query("insert into cyclists(firstname, lastname, nationality, created_at, updated_at, description) VALUES('#{firstname}', '#{lastname}', '#{nationality}', now(), now(), 'auto-generated by importer because no matching cyclists found around year #{year}');")
    @@client.last_id
  end

  def getExactMatchCyclist(lastname, firstname, year)
    cyclist = @@client.query("SELECT c.* FROM cyclists c  WHERE c.lastname LIKE '#{mescape(lastname)}' AND c.firstname LIKE '#{mescape(firstname)}' AND exists (select 1 from race_runners rr where rr.cyclist_id = c.id and #{year} < rr.year + 5 AND #{year} > rr.year - 5)")
    if (cyclist.size > 1) then
      puts "'#{lastname}' - '#{firstname}' is ambiguous for year '#{year}':"
      cyclist.each do |cyclist|
        puts cyclist
      end
      cyclist = nil
#   elsif (cyclist_id.size == 0) then
#     cyclist_id = @@client.query("SELECT distinct c.*, min(rr.year) 'min_year', max(rr.year) as 'max_year' FROM cyclists c join race_runners rr on rr.cyclist_id = c.id WHERE c.lastname LIKE '#{mescape(lastname)}' AND c.firstname LIKE '#{firstname.chars.first}%' group by c.id HAVING (#{year} < max_year + 5 AND #{year} > min_year - 5)")
    end
    if (cyclist != nil) then
      cyclist.first
    else
      nil
    end
  end

  def getOrCreateRace(year, race_description)
    result = @@client.query("SELECT r.* FROM races as r WHERE r.year = '#{year}'")
    if (result == nil || result.count == 0) then
      @@client.query("insert into races(year, name, created_at, updated_at, description) VALUES('#{year}', 'Année #{year}', now(), now(), \"#{mescape(race_description)}\");")
      result = @@client.query("SELECT r.* FROM races as r WHERE r.year = '#{year}'")
    end
    result.first
  end

  def getMatchingRaceRunner(year, cyclist_name, nationality)
    runner = @@client.query("SELECT distinct rr.* FROM race_runners rr WHERE   REGEXP_REPLACE(concat(lower(rr.firstname), lower(rr.lastname)), '[^a-z]','') like  REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^a-z]','') AND rr.nationality = '#{NationalityUtils.normalizeNationality(nationality)}' and rr.year = '#{year}'")
    if (runner == nil || runner.size == 0) then
      runner = @@client.query("SELECT distinct rr.* FROM race_runners rr WHERE   REGEXP_REPLACE(concat(lower(rr.lastname), lower(rr.firstname)), '[^a-z]','') like  REGEXP_REPLACE(lower(trim('#{mescape(cyclist_name)}')), '[^a-z]','') AND rr.nationality = '#{NationalityUtils.normalizeNationality(nationality)}' and rr.year = '#{year}'")
    end
    if (runner != nil && runner.size > 0) then
      runner.first
    else
      nil
    end
  end

  def getRaceRunner(year, cyclist_id, team_id)
    runner = @@client.query("SELECT distinct rr.* FROM race_runners rr WHERE rr.cyclist_id = '#{cyclist_id}' AND rr.team_id = '#{team_id}' and rr.year = '#{year}'")
    if (runner != nil && runner.size > 0) then
      runner.first
    else
      nil
    end
  end

  def createRaceRunner(dossard, lastname, firstname, year, cyclist_id, team_id, race_id, nationality)
    @@client.query("insert into race_runners(number, year, firstname, lastname, nationality, cyclist_id, team_id, race_id, description) VALUES('#{dossard}', '#{year}', \"#{firstname}\", \"#{lastname}\", '#{nationality}', '#{cyclist_id}', '#{team_id}', '#{race_id}', \"auto-generated by importer because no matching racerunners #{lastname} #{firstname} (cyclist_id: #{cyclist_id}) found for year #{year}\");")
    @@client.last_id
  end

  def insertRaceRunner(year, dossard, lastname, firstname, nationality, team_name)
    cyclist_id = nil
    cyclist = getExactMatchCyclist(lastname, firstname, year)
    if (cyclist == nil) then
      cyclist_id = createCyclist(lastname, firstname, nationality, year)
    else
      cyclist_id = cyclist['id']
    end

    team_id = nil
    team = getTeam(team_name, year)
    if (team == nil) then
      team_id = createTeam(team_name, year)
    else
      team_id = team['id']
    end

    race_id = getOrCreateRace(year, nil)['id']

    raceRunner = getRaceRunner(year, cyclist_id, team_id)
    if (raceRunner == nil) then
      createRaceRunner(dossard, lastname, firstname, year, cyclist_id, team_id, race_id, nationality)
    end
    getRaceRunner(year, cyclist_id, team_id)
  end

  def getStage(race_id, stageNb, subStageNb)
    result = @@client.query("SELECT s.* from stages s WHERE s.race_id = '#{race_id}' AND s.stageNb = '#{stageNb}' and s.subStageNb = '#{subStageNb}'")
    if (result != nil && result.size > 0) then
      result.first
    else
      nil
    end
  end

  def createStage(race_id, year, stageNb, subStageNb, sstart, send, sdist, sdate, stage_type, ordinal, stage_details)
    slocation = findMatchingStageLocation(sstart)
    flocation = findMatchingStageLocation(send)
    query = "insert into stages(date, start, finish, start_location, finish_location, stageNb, subStageNb, race_id, stage_type, year, distance, label, ordinal, info, start_location_proposal, finish_location_proposal) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, (select name from stage_locations where id = '#{slocation}'), (select name from stage_locations where id = '#{flocation}'))"

    begin
      statement = @@client.prepare(query)
      statement.execute(frenchToMySQLDate(sdate), sstart, send, slocation, flocation, stageNb, subStageNb, race_id, stage_type, year, sdist, "#{stageNb}.#{subStageNb}", ordinal, stage_details)
    rescue Exception => e
      puts query
      puts e.message
      puts e.backtrace.inspect
    end
    getStage(race_id, stageNb, subStageNb)
  end

  def findMatchingStageLocation(location)
    result = @@client.query("SELECT s.id from stage_locations s WHERE LOWER(name) like LOWER(TRIM('#{mescape(location)}'))")
    # if (result == nil || result.size == 0) then
    #   result = @@client.query("SELECT s.id from stage_locations s WHERE LENGTH(name) = LENGTH(TRIM('#{mescape(location)}')) AND SOUNDEX(name) = SOUNDEX(TRIM('#{mescape(location)}'))")
    # end
    if (result != nil && result.size > 0) then
      result.first['id']
    else
      nil
    end
  end

  def frenchToMySQLDate(date)
    if (date == nil)
      nil
    else
      Date.parse(Utils.frenchToEnglishDate(date)).strftime('%Y-%m-%d')
    end
  end

  def create_ITE_stage_result(year, stage_id, position, runner_name, nationality, time_sec, diff_time_sec, dnf=nil, dns=nil, dnq=nil)
    # TODO reprendre d'ici: insertion en base
    # plus cas particulier "mt", et autres
    # plus classement général

    rr_id = nil
    rr = getMatchingRaceRunner(year, runner_name, nationality)
    if (rr != nil) then
      rr_id = rr['id']
      result = @@client.query("SELECT id from ite_stage_results s WHERE s.stage_id = #{stage_id} and s.race_runner_id = #{rr_id}")
      if (result != nil && result.size > 0) then
        puts "pb (duplicate) on year: #{year}, stage_id: #{stage_id}, position: #{position}, name: #{runner_name}, nationality: #{nationality}, time: #{Time.at(time_sec).utc.strftime("%H:%M:%S")}. discard"
        return
      end
    else
      puts "pb no runner found on year: #{year}, stage_id: #{stage_id}, position: #{position}, name: #{runner_name}, nationality: #{nationality}, time: #{Time.at(time_sec).utc.strftime("%H:%M:%S")}. nil instead"
    end
    query = "insert into ite_stage_results(stage_id, race_runner_id, pos, dns, dnf, dnq, year, diff_time_sec, time_sec, _confidence, runner_s) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
    begin
      statement = @@client.prepare(query)
      statement.execute(stage_id, rr_id, position, dns, dnf, dnq, year, diff_time_sec, time_sec, "importer.rb @ #{Time.new}", runner_name)
    rescue Exception => e
      puts query
      puts e.message
      puts e.backtrace.inspect
    end
  end

end
