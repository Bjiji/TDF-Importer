require 'mysql2'
require 'chronic_duration'

class MySQLUtils

 @@client = Mysql2::Client.new(:host => "localhost", :username => "root", :password => "root", :database => "tdf")

 def mescape(str)
   if (str != nil) then
   @@client.escape(str.strip)
   else
     str
   end
 end

 def getTeam(team, year)
   team = @@client.query("SELECT t.* FROM teams t WHERE trim(lower(t.name)) like trim(lower(\"#{mescape(team)}\"))")
   if (team != nil  && team.size > 0) then
     team.first
   else
     nil
   end
 end

 def createTeam(name, year)
   @@client.query("insert into teams(name, dof, created_at, updated_at, description) VALUES('#{name}', date('#{year}-01-01'), now(), now(), 'auto-generated by importer because no matching teams found around year #{year}');")
   @@client.last_id
 end

 def createCyclist(lastname, firstname, nationality, year)
   @@client.query("insert into cyclists(firstname, lastname, nationality, created_at, updated_at, description) VALUES('#{firstname}', '#{lastname}', '#{nationality}', now(), now(), 'auto-generated by importer because no matching cyclists found around year #{year}');")
   @@client.last_id
 end

 def getExactMatchCyclist(lastname, firstname, year)
  cyclist = @@client.query("SELECT c.* FROM cyclists c  WHERE c.lastname LIKE '#{mescape(lastname)}' AND c.firstname LIKE '#{mescape(firstname)}' AND exists (select 1 from race_runners rr where rr.cyclist_id = c.id and #{year} < rr.year + 5 AND #{year} > rr.year - 5)")
   if (cyclist.size > 1) then
     puts "'#{lastname}' - '#{firstname}' is ambiguous for year '#{year}':"
     cyclist.each do | cyclist |
       puts cyclist
     end
     cyclist = nil
#   elsif (cyclist_id.size == 0) then
#     cyclist_id = @@client.query("SELECT distinct c.*, min(rr.year) 'min_year', max(rr.year) as 'max_year' FROM cyclists c join race_runners rr on rr.cyclist_id = c.id WHERE c.lastname LIKE '#{mescape(lastname)}' AND c.firstname LIKE '#{firstname.chars.first}%' group by c.id HAVING (#{year} < max_year + 5 AND #{year} > min_year - 5)")
   end
  if (cyclist != nil) then
    cyclist.first
  else
    nil
  end
 end

 def getOrCreateRace(year, race_description)
   result = @@client.query("SELECT r.* FROM races as r WHERE r.year = '#{year}'")
   if (result == nil || result.count == 0) then
     @@client.query("insert into races(year, name, created_at, updated_at, description) VALUES('#{year}', 'AnnÃ©e #{year}', now(), now(), \"#{mescape(race_description)}\");")
     result = @@client.query("SELECT r.* FROM races as r WHERE r.year = '#{year}'")
   end
  result.first
 end

 def getRaceRunner(year, cyclist_id, team_id)
   runner = @@client.query("SELECT distinct rr.* FROM race_runners rr WHERE rr.cyclist_id = '#{cyclist_id}' AND rr.team_id = '#{team_id}' and rr.year = '#{year}'")
   if (runner != nil && runner.size > 0) then
     runner.first
   else
     nil
   end
 end

 def createRaceRunner(dossard, lastname, firstname, year, cyclist_id, team_id, race_id, nationality)
   @@client.query("insert into race_runners(number, year, firstname, lastname, nationality, cyclist_id, team_id, race_id, description) VALUES('#{dossard}', '#{year}', \"#{firstname}\", \"#{lastname}\", '#{nationality}', '#{cyclist_id}', '#{team_id}', '#{race_id}', \"auto-generated by importer because no matching racerunners #{lastname} #{firstname} (cyclist_id: #{cyclist_id}) found for year #{year}\");")
   @@client.last_id
 end

  def insertRaceRunner(year, dossard, lastname, firstname, nationality, team)
    cyclist_id = nil
    cyclist = getExactMatchCyclist(lastname, firstname, year)
    if (cyclist == nil) then
      cyclist_id = createCyclist(lastname, firstname, nationality, year)
    else
      cyclist_id = cyclist['id']
    end

    team_id = nil
    team = getTeam(team, year)
    if (team == nil) then
      team_id = createTeam(team, year)
    else
      team_id = team['id']
    end

    race_id = getOrCreateRace(year, nil)['id']

    raceRunner = getRaceRunner(year, cyclist_id, team_id)
    if (raceRunner == nil) then
     createRaceRunner(dossard, lastname, firstname, year, cyclist_id, team_id, race_id, nationality)
    end
    getRaceRunner(year, cyclist_id, team_id)
  end

end